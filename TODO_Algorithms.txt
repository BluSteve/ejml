- see if offset triangle solve is slower than the standard
  * if not make offset the only triangle solver

- wrapper so that block cholesky can be used on regular matrices
- merge cholesky offset by index classes
  * are these fast enough to replace the base class that assumes an index of zero?
- for all QR decomposition, when computing Q don't multiply against the identity matrix

For 0.15 Release
- cholesky block
  * rework it so that its faster on better block sizes
- cholesky accuracy
  * hard coded cholesky inverse for small matrices
- increase block size?
- Block QR
- Unit test for PCA example

For DenseMatrix64F

- LU
  - block

- Least Squares Solver
  - Improve performance

- Linear Solver
  * Iterative
  * Add condition(), use Hager's method? pg 132
  * Put this new condition into NormOps since it should be much faster

- Cholesky
 * Improve stability

- QR
  * Block version
  * Replace col with tran variant of QR decomposition?
    - tran does not use a custom matrix format.
    - tran seems to be about 10% slower on small matrices.

- QR with column pivoting

- SVD
  - Use QR alg to speed up singular values on very tall matrices (pg 403)
  - Divide and conquer algorithm
  - An implementation that just finds zero singular values
  - Add option to overwrite input matrix

- Incremental SVD

- Eigen decomposition
  - Add option to overwrite input matrix
  - Divide and conquer algorithm.

- Accurate version of symmetric eigenvalue for 2 by 2
  - SVD
  - SymmEig

- remove hand inlining of functions
  * Create class that simulates cache misses and counts them.

- Unroll block matrix multiplication when full block.
- Fast Matrix Multiply
- hard code cholesky decomposition for small matrices

- Matrix Multiplication:
  - Try a variant on mult_aux that does the vector mult up to block size then goes down a row.
  - Finish vector vector multiply
  - Code generator for matrix vector ops
  - Add matrix vector multiply
  - Auto switch to all of above in CommonOps